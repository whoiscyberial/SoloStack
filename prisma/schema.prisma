// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  text      String
  authorId  String
  author    User     @relation("author", fields: [authorId], references: [id])
  createdAt DateTime @default(now())

  @@index([title, text])
}

model Tool {
  id             Int         @id @default(autoincrement())
  title          String
  description    String
  text           String?
  link           String
  subcategory    Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId  Int
  creatorId      String
  creator        User        @relation("creator", fields: [creatorId], references: [id])
  favorites      User[]      @relation("favoriteTools")
  favoritesCount Int         @default(0)
  createdAt      DateTime    @default(now())
  verified       Boolean     @default(false)

  @@index([title, description])
}

model Category {
  id            Int           @id @default(autoincrement())
  title         String
  subcategories Subcategory[]
}

model Subcategory {
  id         Int      @id @default(autoincrement())
  title      String
  slug       String   @unique
  tools      Tool[]
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@index([slug])
}

// Next auth

enum Role {
  FREE_USER
  PAID_USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]    @relation("author")
  tools         Tool[]    @relation("creator")
  favoriteTools Tool[]    @relation("favoriteTools")
  role          Role      @default(FREE_USER)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
